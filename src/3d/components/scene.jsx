/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.4 billboard_3d.glb
*/

import React, { useRef, useMemo, useState } from "react";
import { useGLTF, useAnimations, useTexture } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import * as THREE from "three";
function Model(props) {
  const { phaserRef, ...rest } = props;

  let canvasTextureRef = useRef();

  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/3d/billboard_3d.glb");
  const { actions } = useAnimations(animations, group);
  const viewPort = useThree((state) => state.viewport);
  const { width, height } = viewPort;
  const camera = useThree((state) => state.camera);
  const texture = useTexture("/2d/test.png");

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      rotation={[0, Math.PI * 0.5, 0]}
      scale={viewPort.height * 0.3}
    >
      <group name="Scene">
        <mesh
          name="3d_plane"
          position={[-0.168, 0.239, -0.02]}
          rotation={[Math.PI, -1.582, -0]}
          scale={[1, 1, 1]}
        >
          <meshStandardMaterial
            attach="material"
            map={texture}
            opacity={0.8}
            transparent={true}
          />
          <planeGeometry
            attach="geometry"
            args={[0.0015 * 1920, 0.0015 * 1080]}
          />
        </mesh>

        {/* mp4 */}
        <mesh
          name="vid_plane"
          geometry={nodes.vid_plane.geometry}
          position={[0, 0, 0]}
          rotation={[(Math.PI * 3) / 2, 0, Math.PI / 2]}
          scale={[-2.98, 1, 1.68]}
        >
          <meshStandardMaterial
            attach="material"
            metalness={0.1}
            roughness={0.5}
          >
            <canvasTexture
              attach="map"
              args={[phaserRef.current.canvas]}
              premultiplyAlpha={true}
              onUpdate={(self) => {
                self.needsUpdate = true;
              }}
            />
          </meshStandardMaterial>
        </mesh>
      </group>
    </group>
  );
}

export default Model;
